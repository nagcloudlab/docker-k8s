

Manual Scaling of a Kubernetes Deployment

Objectives

Understand the concept of scaling in Kubernetes
Manually scale a deployment up and down
Observe the effects of scaling on the application and resources

--------------------------------------------------------------------------------

Create a Deployment

Using the deployment.yml manifest file provided , create a Kubernetes deployment for the Flask application.
Discovery

Use kubectl get deployments to observe the deployment status.
Use kubectl get pods to see the running pods.


kubectl apply -f deployment.yml
kubectl get deployments
kubectl get pods



Manually scale the deployment named flask-web-app to have 3 replicas.

Observation
Observe the changes with kubectl get deployments and kubectl get pods.

kubectl scale deployment flask-web-app --replicas=3
kubectl get deployments
kubectl get pods


Q,
If you scale a deployment using kubectl scale to a higher number of replicas, 
but the cluster has insufficient resources to accommodate all new replicas, what will happen?

